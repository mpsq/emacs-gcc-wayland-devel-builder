name: build-release
on:
  workflow_dispatch:
    inputs:
      new_commit_n:
        description: "Commit for last release"
        required: true
      old_commit_n:
        description: "Commit # for upstream"
        required: true

env:
  SELF_GH: https://api.github.com/repos/mpsq/emacs-gcc-wayland-devel-builder
  UPSTREAM_GH: https://api.github.com/repos/flatwhatson/emacs

jobs:
  check:
    runs-on: ubuntu-20.04
    env:
      OLD_COMMIT_N: ${{ github.event.inputs.old_commit_n }}
      NEW_COMMIT_N: ${{ github.event.inputs.new_commit_n }}
    steps:
      - name: Check last version
        run: bash ./ci/check-last-version.bash
      - name: Checkout the repo
        uses: actions/checkout@v2
      - name: Set env vars
        id: var
        run: . ./ci/set-env-vars.bash
    outputs:
      ver: ${{ steps.var.outputs.ver }}

  artifact:
    runs-on: ubuntu-20.04
    needs: check
    container:
      image: mpsq/emacs-builder:latest
      options: --user root
    env:
      OLD_COMMIT_N: ${{ github.event.inputs.old_commit_n }}
      NEW_COMMIT_N: ${{ github.event.inputs.new_commit_n }}
      PKG_VERSION: ${{ needs.check.outputs.ver }}
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v2
      - name: Patch glibc
        run: bash ./ci/patch-glibc.bash
      - name: Prepare artifacts
        run: bash ./ci/prepare-artifacts.bash
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.check.outputs.ver }}
          release_name: Release ${{ needs.check.outputs.ver }}
          body_path: /home/pcr/body.md
          draft: false
          prerelease: false
      - name: Upload release asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: /home/pcr/${{ needs.check.outputs.ver }}.tar.gz
          asset_name: ${{ needs.check.outputs.ver }}.tar.gz
          asset_content_type: application/gzip
      - name: Push to AUR
        env:
          PRIV_KEY: ${{ secrets.PRIV_KEY }}
          PUB_KEY: ${{ secrets.PUB_KEY }}
        run: bash ./ci/push-to-aur.bash
