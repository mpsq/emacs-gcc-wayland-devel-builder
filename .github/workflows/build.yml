on:
  schedule:
    - cron: "30 * * * *"

jobs:
  image:
    runs-on: ubuntu-latest
    steps:
      - name: Detect new commit
        run: |
          upstream=$(curl -I -k "$GITHUB_API_URL"/repos/flatwhatson/emacs/commits?per_page=1 | sed -n '/^[Ll]ink:/ s/.*"next".*page=\([0-9]*\).*"last".*/\1/p')
          release=$(curl "$GITHUB_API_URL"/repos/"$GITHUB_REPOSITORY"/releases/latest | jq -r .tag_name | sed -r 's/.*([0-9]{6})/\1/')
          # Check if a new release is needed
          [[ "$upstream" -eq "$release" ]] && exit 1
      - uses: actions/checkout@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: mpsq/emacs-native-comp-wayland-builder:latest

  artifact:
    runs-on: ubuntu-latest
    needs: [image]
    container:
      image: mpsq/emacs-native-comp-wayland-builder:latest
      options: --user root
    steps:
      - name: Prepare artifacts
        run: |
          pacman --noconfirm -S jq
          cd /home/pcr
          version=$(ls emacs* | sed -r 's/.*([0-9]{2}\.[0-9]{1,2}\.[0-9]{1,2}\.[0-9]{6}).*/\1/gi')
          echo "pkg_version=$version" >> $GITHUB_ENV
          mkdir pkg
          tar xf "$(ls emacs*)" -C pkg
          rm pkg/.BUILDINFO pkg/.MTREE pkg/.PKGINFO
          tar czf "$version".tar.gz -C pkg .
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.pkg_version }}
          release_name: Release ${{ env.pkg_version }}
          body: Check emacs git repository.
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: /home/pcr/${{ env.pkg_version }}.tar.gz
          asset_name: ${{ env.pkg_version }}.tar.gz
          asset_content_type: application/gzip
      - name: Prepare and push new version to AUR
        env:
          PKG_VERSION: ${{ env.pkg_version }}
          PRIV_KEY: ${{ secrets.PRIV_KEY }}
          PUB_KEY: ${{ secrets.PUB_KEY }}
          RELEASE_UPLOAD_URL: ${{ steps.create_release.outputs.upload_url }}
        run: |
          cd /home/pcr
          pacman -S git
          sudo -u pcr bash
          mkdir .ssh
          chmod 700 .ssh
          echo "$PUB_KEY" >> .ssh/id_aur.pub
          echo "$PRIV_KEY" >> .ssh/id_aur
          chmod 644 .ssh/id_aur.pub
          chmod 600 .ssh/id_aur
          cat <<EOT >> .ssh/config
          Host aur.archlinux.org
            IdentityFile ~/.ssh/id_aur
            User aur
          EOT
          chmod 644 .ssh/config
          cat <<EOT >> .gitconfig
          [user]
            name = MÃ©ril Pilon
            email = meril.pilon@gmail.com
          line 2
          EOT
          sum=$(sha512sum /home/pcr/"$PKG_VERSION".tar.gz | sed -r 's/(.*)\s.*/\1/')
          git clone ssh://aur@aur.archlinux.org/emacs-gcc-wayland-devel-bin.git
          cd emacs-gcc-wayland-devel-bin
          cat PKGBUILD | sed -r 's~pkgver=.*~pkgver='$PKG_VERSION'~'
          cat PKGBUILD | sed -r 's~sha512sums=.*~sha512sums=\("'"$sum"'"\)~'
          makepkg --printsrcinfo > .SRCINFO
          git add .SRCINFO PKGBUILD
          git commit -m "Bump to $PKG_VERSION"
          git push origin master
