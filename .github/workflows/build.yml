name: "Build and release Emacs (automated)"
on:
  workflow_dispatch:
    inputs:
      new_commit_n:
        description: "Commit for last release"
        required: true
      old_commit_n:
        description: "Commit # for upstream"
        required: true

env:
  OLD_COMMIT_N: ${{ github.event.inputs.old_commit_n }}
  NEW_COMMIT_N: ${{ github.event.inputs.new_commit_n }}

jobs:
  check:
    runs-on: ubuntu-latest
    outputs:
      pkg_version: ${{ steps.var.outputs.pkg_version }}
      pkg_rel: ${{ steps.var.outputs.pkg_rel }}
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v3

      - name: Import environment variables
        shell: bash
        run: |
          while read line; do
            echo "$line" >> $GITHUB_ENV
          done < assets/variables

      - name: Set env vars
        id: var
        run: . ./scripts/set-job-vars.bash

      - name: Check for an existing release
        run: bash ./scripts/check-existing-release.bash
        env:
          PKG_REL: ${{ steps.var.outputs.pkg_rel }}
          PKG_VERSION: ${{ steps.var.outputs.pkg_version }}
          TKN: ${{ secrets.GITHUB_TOKEN }}

  artifact:
    runs-on: ubuntu-latest
    needs: check
    container: mpsq/emacs-builder:latest
    env:
      PKG_VERSION: ${{ needs.check.outputs.pkg_version }}
      PKG_REL: ${{ needs.check.outputs.pkg_rel }}
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v3

      - name: Import environment variables
        shell: bash
        run: |
          while read line; do
            echo "$line" >> $GITHUB_ENV
          done < assets/variables

      - name: Build artifacts
        run: bash ./scripts/build-artifacts.bash

      - uses: ncipollo/release-action@v1
        with:
          tag: ${{ needs.check.outputs.pkg_version }}-${{ needs.check.outputs.pkg_rel }}
          bodyFile: ${{ env.USR_HOME }}/body.md
          name: Release ${{ needs.check.outputs.pkg_version }}-${{ needs.check.outputs.pkg_rel }}
          artifactContentType: application/gzip
          artifacts: ${{ env.USR_HOME }}/${{ needs.check.outputs.pkg_version }}.tar.gz
          token: ${{ secrets.GITHUB_TOKEN }}

      # - name: Push to AUR
      #   env:
      #     PRIV_KEY: ${{ secrets.PRIV_KEY }}
      #     PUB_KEY: ${{ secrets.PUB_KEY }}
      #   run: bash ./scripts/push-to-aur.bash
