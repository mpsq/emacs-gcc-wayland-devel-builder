name: build-release
on:
  workflow_dispatch:
    inputs:
      new_commit_n:
        description: "Commit for last release"
        required: true
      old_commit_n:
        description: "Commit # for upstream"
        required: true

env:
  SELF_GH: https://api.github.com/repos/mpsq/emacs-gcc-wayland-devel-builder
  UPSTREAM_GH: https://api.github.com/repos/flatwhatson/emacs

jobs:
  image:
    runs-on: ubuntu-latest
    env:
      OLD_COMMIT_N: ${{ github.event.inputs.old_commit_n }}
      NEW_COMMIT_N: ${{ github.event.inputs.new_commit_n }}
    steps:
      - name: Detect new commit
        run: |
          # Check if a new release is needed
          if ["$OLD_COMMIT_N" == "$NEW_COMMIT_N" ]; then exit 1; else exit 0; fi
      - uses: actions/checkout@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: mpsq/emacs-native-comp-wayland-builder:latest

  artifact:
    runs-on: ubuntu-latest
    needs: [image]
    container:
      image: mpsq/emacs-native-comp-wayland-builder:latest
      options: --user root
    env:
      OLD_COMMIT_N: ${{ github.event.inputs.old_commit_n }}
      NEW_COMMIT_N: ${{ github.event.inputs.new_commit_n }}
    steps:
      - name: Prepare artifacts
        run: |
          pacman --noconfirm -S jq openssh bc
          cd /home/pcr
          # Get version number
          version=$(ls emacs* | sed -r 's/.*([0-9]{2}\.[0-9]{1,2}\.[0-9]{1,2}\.[0-9]{6}).*/\1/gi')
          echo "pkg_version=$version" >> $GITHUB_ENV
          # Clean artifact
          mkdir pkg
          tar xf "$(ls emacs*)" -C pkg
          rm pkg/.BUILDINFO pkg/.MTREE pkg/.PKGINFO
          tar czf "$version".tar.gz -C pkg .
          sum=$(sha512sum "$version".tar.gz | sed -r 's/(.*)\s\s.*/\1/')
          echo "pkg_sum=$sum" >> $GITHUB_ENV
          # Get release body
          delta=$(echo "$NEW_COMMIT_N - $OLD_COMMIT_N" | bc)
          echo -en "# Short summary\n\n" > body.md
          echo -en "Check [upstream](https://github.com//flatwhatson/emacs/commits) for more details.\n\n" >> body.md
          # What is going on here?
          #   1. We get the list of commits since last release
          #   2. We use jq to parse and retain only the commit message + its url
          #   3. First sed to remove "Merge" commits
          #   4. Second sed to remove any special char at the beginning of the message
          #   5. Third sed to prepend the message with "- "
          curl -s "$UPSTREAM_GH"/commits?per_page="$delta" | jq -r '.[].commit | (.message | capture("(?<id>.+)\n").id) + " [commit](" + .url + ")"' | sed '/^Merge/,+1 d' | sed 's/^[^[:alnum:]]*//' | sed -r 's/(.*)/- \1/' >> body.md
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.pkg_version }}
          release_name: Release ${{ env.pkg_version }}
          body_path: /home/pcr/body.md
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: /home/pcr/${{ env.pkg_version }}.tar.gz
          asset_name: ${{ env.pkg_version }}.tar.gz
          asset_content_type: application/gzip
      - name: Prepare and push new version to AUR
        env:
          PKG_SUM: ${{ env.pkg_sum }}
          PKG_VERSION: ${{ env.pkg_version }}
          PRIV_KEY: ${{ secrets.PRIV_KEY }}
          PUB_KEY: ${{ secrets.PUB_KEY }}
        run: |
          cd /root
          mkdir .ssh
          # Setup SSH
          echo "$PUB_KEY" | tr -d '\r' > .ssh/id_aur.pub
          echo "$PRIV_KEY" | base64 --decode > .ssh/id_aur
          chmod 600 .ssh/id_aur
          echo -en 'Host aur.archlinux.org\n  IdentityFile /root/.ssh/id_aur\n  User aur\n' > .ssh/config
          ssh-keyscan aur.archlinux.org > .ssh/known_hosts
          ssh-keyscan 95.216.144.15 >> .ssh/known_hosts
          # Setup git
          cd /home/pcr
          git config --global user.name "MÃ©ril Pilon"
          git config --global user.email "me@mpsq.org"
          git clone ssh://aur.archlinux.org/emacs-gcc-wayland-devel-bin.git
          chown -R pcr:pcr emacs-gcc-wayland-devel-bin
          cd emacs-gcc-wayland-devel-bin
          # Amend PKG
          sed -i -r -e 's~pkgver=.*~pkgver='$PKG_VERSION'~' PKGBUILD
          sed -i -r -e 's~sha512sums=.*~sha512sums=\("'"$PKG_SUM"'"\)~' PKGBUILD
          chown pcr:pcr PKGBUILD
          rm .SRCINFO
          su pcr -c "makepkg --printsrcinfo > .SRCINFO"
          # Push changes
          git add .SRCINFO PKGBUILD
          git commit -m "Bump to $PKG_VERSION"
          git push origin master
